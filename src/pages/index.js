import Head from 'next/head'
import { gql, GraphQLClient } from 'graphql-request'
import Hero from '../components/Hero'
import Section from '../components/Section'
import styles from '../styles/Home.module.scss'

export default function Home({ videos }) {
  const filterVideos = (videos, genre) => {
    return videos.filter((video) => video.tags.includes(genre))
  }

  const seenVideos = (videos) => {
    return videos.filter((video) => video.seen == true || video.seen == null)
  }

  return (
    <div>
      <Head>
        <title>Appletv clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Hero videos={videos} />
        <div className={styles.feeds}>
          <Section genre={'Recommended for you'} videos={seenVideos(videos)} />
          <Section genre={'Drama'} videos={filterVideos(videos, 'drama')} />
          <Section genre={'Comedy'} videos={filterVideos(videos, 'comedy')} />
          <Section genre={'Music'} videos={filterVideos(videos, 'music')} />
          <Section genre={'Sport'} videos={filterVideos(videos, 'sport')} />
          <Section
            genre={'Biography'}
            videos={filterVideos(videos, 'biography')}
          />
        </div>
      </main>
    </div>
  )
}

export async function getStaticProps() {
  const url = process.env.ENDPOINT

  const graphQLClient = new GraphQLClient(url, {
    headers: {
      authorization: process.env.GRAPH_TOKEN,
    },
  })

  const videoQuery = gql`
    query {
      videos {
        createdAt
        id
        title
        description
        seen
        slug
        tags
        thumbnail {
          url
        }
        mp4 {
          url
        }
      }
    }
  `

  // const accountQuery = gql`
  //   query {
  //     account(where: { id: "ckucxxxvsaa860b59fx4vdyg2" }) {
  //       username
  //       avatar {
  //         url
  //       }
  //     }
  //   }
  // `

  const data = await graphQLClient.request(videoQuery)
  const videos = data.videos

  // const accountData = await graphQLClient.request(accountQuery)
  // const account = accountData.account

  return {
    props: {
      videos,
    },
  }
}
